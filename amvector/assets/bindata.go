// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/resources/amprobe/configs/config.toml
// assets/resources/amprobe/configs/init.yaml
// assets/resources/amprobe/nginx/nginx.conf
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsResourcesAmprobeConfigsConfigToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\xcf\x53\x1a\x49\x14\xbe\xf7\x5f\xd1\x35\x5c\xf4\xa2\x68\x36\x65\x2e\x1e\x34\x98\xd5\x5a\xdd\xb5\x82\x7b\xa2\xa8\xd4\x28\x2d\x4c\x81\x33\xb3\x33\x0d\xd1\x1b\xd6\xaa\x48\x22\x82\x2b\x04\x17\x88\xd1\x55\x23\x66\x57\x30\xbb\x29\xd7\xc8\x28\xff\xcc\x74\xf7\xcc\x89\x7f\x61\xab\x67\xf8\x21\xd6\x56\xe0\x32\xf5\xfa\x7d\x5f\xbf\x7e\xdf\xf7\x5e\xe0\x85\xb4\x88\xb4\x20\xf0\xc0\x08\xc6\x2a\x2b\xef\x91\xdc\x5f\xa4\x72\x45\xde\x27\xc1\xb4\xa2\x63\x38\x0e\x05\xef\x90\xf3\x17\xfa\x72\xd8\x9f\x75\x92\x3d\x01\xf3\x8a\xc6\x73\x9e\x79\xbd\xde\xf6\xb1\x69\x1c\xd8\xe5\x4d\xb2\xf9\x8f\x5d\xbc\x64\x97\x69\x72\xbf\x69\x5d\x6f\xd2\xe2\x35\x2d\x5e\xdb\x85\xe6\x00\xc9\x14\xcc\xbb\x0c\x3b\xff\x6d\x10\xf8\x23\x71\x1c\x52\x5e\xcb\x0b\xd2\x0a\x52\xe2\x9c\xe6\x89\x17\xf8\x51\x02\x69\xd3\x48\x0c\x21\x8d\xdf\xad\x6a\xca\x22\x12\xc0\x84\xaa\xfe\x28\xae\xa0\x07\x91\x79\x0d\x2d\x2b\x5a\x14\x8e\xc3\x65\x31\xa6\x23\x00\x02\x2f\xd5\xa5\x20\x98\x08\x85\x34\xa4\xeb\x3c\x71\x58\x54\xd5\xe1\x04\x5a\xc2\x8a\x36\xa4\x2b\x4b\x51\x01\x00\x0f\xa4\x85\x2b\x9a\xa9\x91\xdb\x7d\xfa\x2e\x65\x36\xae\xc9\xe5\x01\xcd\xdf\xf3\x82\xee\x6a\xac\xb4\x61\x6f\xf2\x0f\xe0\x81\x76\x25\x69\x7d\x5c\x67\xe5\x3d\xba\x7b\xce\x4a\x1b\xec\x64\x9d\x95\x0f\xac\xda\x3d\x39\x4d\x75\x73\x48\xad\x44\x8b\xd7\x66\xa3\x41\xde\x1c\xd3\xf4\xb9\x75\xbc\x63\x17\xbf\xd8\xa5\x7c\x3b\x21\xf0\xbd\xa2\xad\xf0\xbe\xd2\x83\x3a\xc9\x7d\x24\x46\x92\xe4\xea\xd6\xd5\xaf\x56\xbd\x40\xab\xc7\xc4\xc8\x02\x1f\x5a\x8c\x87\xe1\x38\xc4\x5a\x1c\x3d\x2c\x8d\x7d\x6e\x90\xc3\xb7\x03\xac\x5c\x23\xe9\x0c\xcd\xd7\xe9\xce\x3a\x2b\x6d\x3c\x3a\x6e\x19\x25\x55\xd1\x71\x58\x43\xfa\x20\xf0\x4d\x2e\xac\xa9\x4e\x77\xf4\x5f\x62\x12\x46\x5c\x2a\xab\x76\xcf\xee\x6a\x56\xf3\x90\xee\x9e\x91\x6c\xdd\x6c\x9c\xd9\xa9\x0c\xcb\x57\x39\x55\x25\x69\x17\x9a\x5c\x90\xe2\x97\xb6\x20\x2d\xa3\xe4\x68\x32\x27\xae\xce\x4a\xcb\x08\x4b\x4e\xb3\xc7\x46\x1d\x59\x5d\xaa\x5e\x01\x0e\x03\x39\x3d\xa7\xe9\x7d\x62\x24\xdd\x2b\x68\xe1\x8a\x83\x7f\x52\x91\xfc\x5c\x91\x65\xae\xc0\xc8\xd3\x1e\x98\x5d\xdc\xda\xc5\xbf\xdb\xa9\x9f\x8f\xcc\x9b\xcb\x2e\x4b\x1f\x7e\x26\x14\x43\x1d\xbc\x03\xef\xde\x6a\x1d\x57\x49\x2e\x43\xd2\x19\x66\x24\xc1\x82\xb8\x18\x43\xdc\x02\xd2\xaa\xf3\xea\x57\x42\xaf\xd1\xb9\x3a\xcb\x57\xad\xd4\x27\xf2\xa6\x4a\x0f\x8e\xc8\xd5\xc6\x43\x0a\xd6\xd8\xa7\x87\x1b\x60\x4a\xe6\x04\x13\x71\xac\xcc\x49\x61\x4d\xc4\xa8\x23\x03\x08\xf8\x26\xb9\x68\xed\xbe\xf5\x0f\x82\xd0\x3d\xe8\x77\xbf\x73\xc0\xf2\x55\xba\xfd\x2f\xc9\x65\xc0\xcf\xba\xeb\x5d\x1e\x25\xf5\x2d\x76\xb4\x0e\xe6\x45\x5d\x7f\xad\x68\xa1\x4e\xb8\x5b\x12\xf0\x4d\x76\x8c\xed\xf8\xb5\xed\x6e\x0f\xf4\xfb\x67\xdb\x36\xf1\xfb\x67\xe7\x94\x10\x72\xa1\x20\xe0\x93\xf4\x68\xf0\xdb\x16\x6d\x19\x3b\xae\xe2\xf4\xe8\x2b\xcd\xd4\x60\x4c\x5f\x8c\x45\x21\xd9\xbb\x33\x1b\xa7\xf4\xc3\x19\xab\xbc\x05\x3e\x94\x90\x96\x10\xef\x72\x40\x48\x84\xc4\x51\x21\x08\x40\x60\x0a\x47\x90\x26\x23\xfc\x7f\xf4\x77\x7b\x24\x7b\xd2\x25\xb6\x93\x25\xab\x99\x82\xd2\xf2\x92\x22\x2f\x4b\xe1\x7e\x6e\xfe\x20\x97\x19\xe1\x88\xd7\x61\x5e\x10\xdd\xa2\xcd\x9b\x06\xad\xdc\xba\xac\x6e\x0f\xf8\xd4\xa5\x52\x76\x79\xcb\xfe\x63\x8f\xed\xa6\xc0\x8c\x8c\x91\x96\x10\x63\xce\x36\x80\x1e\xe8\xda\x13\xea\x00\x04\x66\x95\x70\x98\xaf\xaa\x17\x52\xec\x51\xc3\x86\x62\x4a\x58\x00\xb3\x28\x81\x38\x4e\x08\xf1\xc1\x12\xc0\x4b\x05\x8b\x58\x52\x9c\xfd\xc2\xc3\x23\x02\x74\x7e\x1e\x48\xeb\x59\x72\x7a\x41\xb6\x53\x64\x7b\xcb\xbc\x49\x9a\x37\x9f\x68\xf1\x8c\x34\x8b\xee\x52\xe0\x3e\x9c\x08\x3b\x90\xb1\x36\xa4\x0b\xe4\x8e\x2d\x99\xcd\xf7\xac\xf0\x3b\x1c\x83\xe4\xf4\x82\xdb\xd8\xc1\x02\x10\x98\x88\xe3\x48\xf0\x91\x11\xdb\x56\xeb\x8d\x39\xbb\xbc\x27\xb9\x0c\x7d\xf7\x95\x18\xd9\x01\x77\xba\x5b\x46\x69\xda\xff\x74\x64\x74\x78\xda\xff\xe4\xd9\x77\xc3\xce\xf7\x20\xf0\x4b\x61\x59\x92\xc3\x73\x08\x47\x14\xc7\x38\x4e\x5c\xe8\x52\x44\xd1\x5a\x27\xe7\x07\xb4\xc6\x13\xc4\x95\xae\x7d\xac\x66\x8a\x56\x3e\xb8\x23\xde\x32\xb6\xbb\x5b\xb7\x65\xa4\xc1\xd4\xaa\x2a\x69\x28\xd4\x9b\xef\x28\x5a\x83\xed\xc1\xea\xcd\x94\x18\xc7\x91\x57\x02\x00\x20\x30\x23\x4b\xd8\x27\x62\x31\xf8\xe8\x2d\x3c\xfe\xdc\xd1\xbf\x4f\x11\xd7\x12\xfa\xb0\x24\x4b\x78\x68\x4d\x5c\x89\x09\xe0\xbf\x00\x00\x00\xff\xff\x75\x14\xe8\xe8\x65\x06\x00\x00"

func assetsResourcesAmprobeConfigsConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsConfigToml,
		"assets/resources/amprobe/configs/config.toml",
	)
}

func assetsResourcesAmprobeConfigsConfigToml() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/config.toml", size: 1637, mode: os.FileMode(420), modTime: time.Unix(1721558254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeConfigsInitYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x2d\x4e\x2d\x2a\xb6\xe2\x52\x50\xd0\x55\x00\x31\xf3\x12\x73\x53\xad\x14\x12\x53\x72\x33\xf3\xb8\x14\x14\x14\x14\x0a\x12\x8b\x8b\xcb\xf3\x8b\x52\xa0\x62\x86\x46\xc6\x26\xa6\x66\x60\x99\xe2\x92\xc4\x92\xd2\x62\x2b\x05\x43\x30\x2f\xb3\x38\x1e\xac\x00\xc2\x47\x31\x2b\xb7\xa0\x28\x3f\x29\x15\xcd\x34\x22\x0c\x32\xe0\x02\x04\x00\x00\xff\xff\xc2\x1e\x74\xc4\x9c\x00\x00\x00"

func assetsResourcesAmprobeConfigsInitYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsInitYaml,
		"assets/resources/amprobe/configs/init.yaml",
	)
}

func assetsResourcesAmprobeConfigsInitYaml() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsInitYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/init.yaml", size: 156, mode: os.FileMode(420), modTime: time.Unix(1721555593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxNginxConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4d\x6b\xdb\x48\x18\xc7\xef\xfa\x14\x0f\xb1\x0f\xbb\x0b\xd1\xc8\xd9\x78\x37\x44\xec\x69\x61\xd9\xbd\x2d\x0b\x81\x3d\x55\x4c\x35\x8f\xed\x21\x92\x66\x78\x66\xfc\x12\x4a\xa0\x97\xb6\xa1\x25\x6d\x03\xa1\x90\x92\xe2\x06\x4a\x09\xa5\xc4\xed\xa1\xe4\x10\xf2\x71\xe4\xd8\xdf\xa2\x8c\xa4\x38\x89\xeb\x34\x74\x0e\xa3\x19\xfd\x7f\xcf\x0b\x7f\xcd\xa8\xaf\x68\x13\x29\xd2\xa4\x62\x34\x06\x0d\x40\x23\xf4\x04\xc7\x54\x65\xa0\x5a\xad\xd0\xf3\x90\x48\x51\x94\xa8\x36\x00\xeb\x71\x62\x89\x6a\xb3\xac\x2d\xb3\x01\x2b\x14\xdf\x29\x7d\x4e\x59\xe8\x69\x29\xa0\x1a\x05\x49\xdd\xac\x24\x7d\x2d\x85\xcb\xd4\xc3\xcc\x1a\x78\xe0\x39\xa2\x2a\x1c\xab\x2c\xc3\xd8\x4a\x95\xb9\xd2\xc1\xca\x6a\xe8\x6d\x7b\x5e\xc7\x5a\x5d\x71\x32\x8b\x93\xae\xc0\xcb\xbc\x68\xe3\xaa\x7a\x2a\x53\xf4\xed\x96\x46\x13\x16\xa0\xc0\x16\xef\x26\x36\x72\xaf\x00\xb8\xd6\x89\x8c\xb9\x4b\xcc\x54\x6c\xd1\x2e\x1b\x4b\xc8\xd3\xd0\x2b\x60\x83\x99\x68\xc9\xe4\x32\x2d\xa8\xac\x4c\xb2\x89\xa8\x79\x22\x7b\x18\x59\x99\xa2\xea\x5a\x80\xdf\x9a\xb3\x18\xea\x21\x55\x6d\xb9\x91\x48\x63\x31\xab\x36\x6b\x41\x38\x13\x4a\x32\xca\x78\x8a\x00\x89\x8a\x79\xd2\x51\xc6\x86\x50\x83\xf1\xe1\x6e\xfe\xf4\x28\x3f\x38\xce\x0f\x3f\xe5\x6f\x1e\x8e\x77\x5e\x5d\x9c\xed\xe5\x27\xaf\xf3\xe1\x30\x7f\xb9\xeb\x5d\xa5\x56\x65\xef\xc0\xb8\xd6\xd7\x4a\xba\xc1\x13\xc9\x8d\xf3\xa2\x6b\x88\x99\x0e\x27\xac\x1c\xe9\xd8\x34\x71\x7c\x78\x03\x97\x99\xc0\x41\xf5\xf0\x1d\x72\x53\xb6\xb4\x15\x39\x27\x0c\xd4\xbb\x24\x8b\x89\x15\x55\xd9\xa2\x88\xed\x5b\x5a\x64\x5c\x4b\x36\xd7\xa7\x26\x35\xd8\x8a\x34\x37\x06\xdc\xf7\x5c\x67\xac\xb1\xf2\xbb\x1f\xf8\x81\xdf\x58\x5f\x0b\x82\x80\x85\x50\x9b\x9c\x1e\xe7\xc3\xe1\xe4\xfc\x63\xfe\x62\x6f\x72\x3a\xba\xd8\xff\x5c\x1a\xb3\x20\x11\xa1\x90\x84\xb1\x2d\x8f\xe5\xb7\xba\x41\x1b\x75\x90\x0b\x24\xf8\x5b\x19\x0b\xf5\xc2\xf3\xef\x83\xff\x2f\xff\x87\x3c\x59\xfe\xe7\x5f\xa8\x13\xa6\xca\x62\xc4\x85\xa0\x3b\x83\xfe\x52\xd4\xe7\x24\x50\xb8\x15\xd4\x4b\x82\x0b\x11\x0d\xa2\xd6\xa5\xe4\x56\x77\xf8\xd6\x37\xf3\x96\xd5\x80\xb0\x4f\xd2\x22\xdc\x63\x7d\xb3\x41\x09\xfb\xc9\xff\xe5\xe7\x3a\xb0\x7a\x03\xee\x13\xf2\xcd\x10\x6a\xe3\x67\xef\xc7\x3b\x1f\xc6\x6f\x9f\x4c\x46\x8f\xf3\xe7\x67\xd3\x83\x77\x3f\xe6\x7a\xdf\xb0\xd0\x5b\x10\xe2\xe8\xa8\x87\x64\x5c\x6f\x0d\xbf\xb1\x10\xba\x66\xc3\x86\x6e\x13\x17\x08\xf5\x22\xb0\x5b\xee\xee\xb0\xee\xcf\xd9\x6d\x87\xa5\x2a\x62\x69\xa1\x49\x35\x98\xee\x1f\x4c\x46\xa3\xe9\xd1\x97\xe9\xa3\xdd\x8b\xf3\x93\x99\x52\xfe\x8e\x34\x6f\xbb\xbb\xdb\x0c\x02\x68\x06\x2b\xd0\x0c\x7e\x85\x66\xb0\x0a\xc0\x9a\xc1\xfc\x91\x9d\xf9\xfd\xc7\x95\x3a\x67\x3b\x29\x65\x6f\xbb\x50\xd7\xdb\x2b\xe7\x6d\xef\x6b\x00\x00\x00\xff\xff\x85\x80\x15\xb3\x35\x05\x00\x00"

func assetsResourcesAmprobeNginxNginxConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxNginxConf,
		"assets/resources/amprobe/nginx/nginx.conf",
	)
}

func assetsResourcesAmprobeNginxNginxConf() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxNginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/nginx.conf", size: 1333, mode: os.FileMode(420), modTime: time.Unix(1721555593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/resources/amprobe/configs/config.toml": assetsResourcesAmprobeConfigsConfigToml,
	"assets/resources/amprobe/configs/init.yaml":   assetsResourcesAmprobeConfigsInitYaml,
	"assets/resources/amprobe/nginx/nginx.conf":    assetsResourcesAmprobeNginxNginxConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"amprobe": &bintree{nil, map[string]*bintree{
				"configs": &bintree{nil, map[string]*bintree{
					"config.toml": &bintree{assetsResourcesAmprobeConfigsConfigToml, map[string]*bintree{}},
					"init.yaml":   &bintree{assetsResourcesAmprobeConfigsInitYaml, map[string]*bintree{}},
				}},
				"nginx": &bintree{nil, map[string]*bintree{
					"nginx.conf": &bintree{assetsResourcesAmprobeNginxNginxConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/resources/amprobe/configs/config.toml
// assets/resources/amprobe/configs/model.conf
// assets/resources/amprobe/nginx/cert/fullchain.pem
// assets/resources/amprobe/nginx/cert/privkey.pem
// assets/resources/amprobe/nginx/conf.d/amprobe.conf
// assets/resources/amprobe/nginx/mime.types
// assets/resources/amprobe/nginx/nginx.conf
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsResourcesAmprobeConfigsConfigToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x4f\x73\xda\x46\x1c\xbd\xef\xa7\xd0\xe0\x8b\x7d\xb1\x49\xd2\xb4\xb9\xf8\x80\xe3\xb4\xce\x14\x37\x9e\xe0\x9e\x18\x4f\x46\x58\x6b\xa1\x31\xd6\xaa\xd2\xe2\xd8\x37\x3c\x85\x12\xdc\x28\x26\x35\x18\x06\xa8\x63\x4f\xe2\x98\xfe\xe1\x4f\xda\x0c\x6d\x83\xc0\x5f\x86\xdd\x95\x4e\x7c\x85\xce\x4a\x02\x0c\x9d\x8e\x2e\x9a\xfd\xfd\xde\xdb\xfd\xbd\xf7\x76\xa3\x5f\x2a\x31\xa8\x6f\x81\x39\x21\x8e\xb1\xc6\xaa\xaf\x49\xfe\x77\x52\x6b\x93\x9f\x53\x60\x0d\x19\x58\x58\x16\x02\xc1\x45\xf7\x0b\x4c\xf5\xb0\xdf\x5a\xe4\xe4\x2d\xd8\x40\x3a\xef\x79\x10\x0c\x06\xfd\xf2\xc0\x2a\x3b\xd5\x0c\xc9\xfc\xe9\x94\x1a\xac\x91\x23\xfd\x8c\xdd\xc9\xd0\x52\x87\x96\x3a\x4e\xf1\x66\x9e\x98\xc5\x41\xcf\x64\xd7\x3f\x2d\x80\x48\x3c\x89\x25\xf4\x5c\xdd\x54\xf6\x20\x4a\x72\x9a\x7b\x41\x10\x81\xfb\x50\x5f\x83\xa2\x04\x75\xbe\xb7\xa6\xa3\x18\x0c\x80\x90\xa6\x7d\x23\xee\xc1\x5b\x2b\x1b\x3a\xdc\x41\xfa\xae\xb0\x2c\xec\x88\x09\x03\x02\x10\x7d\xaa\x6d\x6f\x81\x90\x24\xe9\xd0\x30\x78\xe3\x92\xa8\x69\x4b\xfb\x70\x1b\x23\x7d\xd1\x40\xdb\xbb\x01\x00\xe6\x04\x5a\x6c\x53\xb3\x49\x3e\x9d\xd2\xb3\xec\xa0\xdb\x21\x8d\x32\x2d\xf4\xf9\x81\x7a\x4d\x56\x49\x3b\x19\xfe\x03\xe6\x04\xa7\x96\xb2\xdf\x1f\xb1\xea\x6b\xfa\xea\x9a\x55\xd2\xec\xed\x11\xab\x96\xed\x66\x9f\xbc\xcb\x8e\x7b\x48\xb3\x42\x4b\x9d\x41\xb7\x4b\x8e\x2f\x69\xee\xda\xbe\x7c\xe9\x94\x3e\x3a\x95\x82\xdf\x10\xfd\x0a\xe9\x7b\x5c\x57\x5a\x6e\x91\xfc\x7b\x62\xa5\x48\xbe\x65\xb7\xbf\xb7\x5b\x45\x5a\xbf\x24\xd6\x09\x58\x85\xb1\xa4\x2c\x2c\x0b\x58\x4f\xc2\xdb\x47\x63\x1f\xba\xe4\xfc\xc7\x79\x56\x6d\x92\x9c\x49\x0b\x2d\xfa\xf2\x88\x55\xd2\x33\xe5\xa1\x55\xd1\x90\x81\x65\x1d\x1a\x0b\x60\x75\x65\xf3\x50\x73\xd5\x31\xbe\x4b\x28\x18\x72\xab\xec\x66\x9f\xf5\x9a\xf6\xcd\x39\x7d\x75\x45\x4e\x5a\x83\xee\x95\x93\x35\x59\xa1\xce\xa9\x6a\x29\xa7\x78\xc3\x0d\x29\x7d\xf4\x0d\x19\x5a\x15\xd7\x93\x75\xf1\x20\xac\xec\x40\xac\xb8\x62\x7f\x71\xd7\xb5\xd5\xa3\x9a\x1c\xc0\x65\x20\xef\xae\x69\xee\x94\x58\x29\x6f\x0b\x5a\x6c\x73\xf0\x13\x0d\xaa\x0f\x91\xaa\x72\x07\xee\xdc\x9f\x80\xd9\x2f\x9f\x9c\xd2\x1f\x7e\xeb\x87\x8b\xc1\xdf\x8d\x31\xcb\x14\xfe\xb1\x94\x80\x23\xbc\x0b\x1f\xef\x6a\x5f\xd6\x49\xde\x24\x39\x93\x59\x29\xb0\x29\xc6\x12\x90\x47\x40\x39\x70\xa7\x7e\x16\x98\x08\x9d\x6f\xb1\x42\xdd\xce\xfe\x4a\x8e\xeb\xb4\x7c\x41\xda\xe9\xdb\x14\xac\x7b\x4a\xcf\xd3\xe0\x91\xca\x09\x42\x49\x8c\xd6\x15\x59\x17\x31\x1c\xd9\x00\xa2\xab\x2b\xdc\x34\x5f\xb7\xe9\x8b\x10\x18\x17\xa6\xd3\xef\x16\x58\xa1\x4e\x5f\xfc\x45\xf2\x26\xf8\xd6\xf0\xb2\xcb\x57\x49\xeb\x07\x76\x71\x04\x36\x44\xc3\x78\x8e\x74\x69\xb4\x3c\x3e\x12\x58\x5d\x19\x05\xdb\xcd\xab\x9f\xee\x39\x21\x12\x09\xfb\x31\x89\x44\xc2\xeb\x48\x82\x1e\x14\x44\xc3\x48\xde\x02\x4f\x92\x58\x73\x6f\x8c\x87\x4a\x20\xd9\xf0\xa0\x8b\x09\x24\x07\x40\x18\xee\xc3\x04\xaf\x4a\x3c\x62\x01\xf0\x14\x61\x11\x2b\x48\xe5\xa6\x70\x95\x43\xb2\xeb\x2e\x00\xd1\x50\x12\xc7\xb7\x66\xb4\xf3\xd5\x99\x24\x93\x35\xfa\x24\x6f\xd2\xb3\x7f\x88\x75\x32\xef\x05\x72\x68\x55\xd6\x22\xf7\xef\xdc\x5d\x5a\x8b\xdc\x7b\xf0\xd9\x92\xfb\xbf\x00\x22\x8a\xac\x2a\xaa\xbc\x0e\x71\x1c\xb9\xb3\xba\xeb\x81\x31\xc5\x2e\x3c\x1c\xf5\x7c\x0d\x0f\x79\x83\xb8\x37\x9e\xd8\xbe\xc9\xd2\xda\x1b\x2f\x95\x43\xeb\xc5\xf8\xa1\x18\x5a\x39\xf0\xe8\x40\x53\x74\x28\x4d\x22\xb9\x0b\x0f\x05\x3f\x0b\x93\x18\x88\x49\x1c\x7f\xc6\x35\x7a\x28\x1a\x31\x45\x9d\x9d\x6b\xdb\x5d\xfd\xcf\x74\xae\x46\x33\x57\xd2\x7b\x53\xa6\xe1\xfc\xbe\xd7\xde\x78\xc1\x22\xc7\x17\x76\xaf\xc7\x1a\x67\xac\x78\x05\x78\x8c\xc2\x48\x94\x26\x94\xff\xd7\xea\x0d\xe7\x3d\x13\xb3\x23\x8e\x58\x1e\xab\x18\xea\xaa\xc8\xed\xfb\x3c\x08\xfe\x0d\x00\x00\xff\xff\x83\xcc\xe5\xb3\x9f\x05\x00\x00"

func assetsResourcesAmprobeConfigsConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsConfigToml,
		"assets/resources/amprobe/configs/config.toml",
	)
}

func assetsResourcesAmprobeConfigsConfigToml() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/config.toml", size: 1439, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeConfigsModelConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\xca\x84\x30\x0c\x85\xf7\x3d\xc5\x5b\x89\x82\x78\x83\x9e\x44\x44\x6a\xff\x54\x2b\xd5\xf4\x8f\x11\x99\xdb\x0f\x75\x16\x83\x30\xab\x84\xc7\xf7\x25\xaf\x17\xfa\x3f\xe9\xd0\xf1\x8f\x42\xdc\xa3\x46\xde\x07\x23\xb0\x38\xce\xa9\x05\x4f\x6b\x0b\xe7\xd5\x98\x3e\x73\x8a\xfe\xf5\xc0\xf2\x0f\x4c\x38\xd1\x03\x9a\x61\x31\xb6\x18\xbf\x27\x28\x04\xf2\x3a\x18\x2a\x3a\x6f\x54\x5f\x0b\x09\xa1\xce\x1d\x05\x85\xb5\x70\x29\xf1\xd5\x34\xc6\xf4\x9b\x53\xbf\x90\x1c\x83\xd9\x60\x31\xd7\xd2\xdd\xff\x72\x19\x0d\xaa\x0a\xd2\xf1\xb4\x16\x27\xdf\xcb\x9d\x38\xaf\x9f\xa4\x34\x7a\x07\x00\x00\xff\xff\x69\x9d\x0d\x22\xe0\x00\x00\x00"

func assetsResourcesAmprobeConfigsModelConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsModelConf,
		"assets/resources/amprobe/configs/model.conf",
	)
}

func assetsResourcesAmprobeConfigsModelConf() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsModelConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/model.conf", size: 224, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxCertFullchainPem = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func assetsResourcesAmprobeNginxCertFullchainPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxCertFullchainPem,
		"assets/resources/amprobe/nginx/cert/fullchain.pem",
	)
}

func assetsResourcesAmprobeNginxCertFullchainPem() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxCertFullchainPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/cert/fullchain.pem", size: 0, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxCertPrivkeyPem = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func assetsResourcesAmprobeNginxCertPrivkeyPemBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxCertPrivkeyPem,
		"assets/resources/amprobe/nginx/cert/privkey.pem",
	)
}

func assetsResourcesAmprobeNginxCertPrivkeyPem() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxCertPrivkeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/cert/privkey.pem", size: 0, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxConfDAmprobeConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x41\x6b\xd4\x40\x14\xc7\xef\xfb\x29\x1e\x6d\x0e\x2a\x34\x2f\xf1\x62\x49\x8e\x82\xe8\x4d\x84\x82\x20\x3a\x8c\x3b\x6f\x9b\xc1\x6c\x26\xbc\x99\x6d\xb6\x48\xc1\x93\x16\xa5\x6a\x41\x84\x4a\x65\x15\x44\x8a\x88\xd5\x53\x0f\xc5\x8f\x33\xdb\xf5\x5b\x48\x92\x5d\x2d\xab\x06\xe7\x90\x4c\xf2\xff\xbd\x79\xef\xff\x67\x2c\xf1\x16\x31\x3c\xec\x01\x00\xe4\xda\x3a\x2a\xa0\x5d\xeb\x51\xfa\xe7\xcf\x3b\x49\x72\x37\x59\x28\x6d\xad\x28\xe4\x90\x00\x44\x0a\xab\x30\x3d\xdc\xf3\x4f\xdf\xfb\x83\x23\x7f\xf8\xd5\xbf\x7d\x34\xdd\x7d\x7d\x76\xba\xef\xbf\xbc\xf1\x93\x89\x7f\xb9\xd7\x6b\xcf\x33\x7d\xe9\xb4\x29\x00\x65\x59\xce\x1b\xd7\x4b\xe6\x5a\x5a\x00\xc0\x91\x65\xb4\x99\x64\xc2\x62\x53\x17\x63\xcc\xdc\x30\xaf\xd9\xf4\x17\xaa\x0b\x45\xe3\xf9\x2b\xac\xe5\xdf\x92\xe3\x6d\x31\xd0\x39\x59\x08\x46\xac\x9b\x07\x36\x9d\x70\x99\xde\xf9\xcb\x38\x28\x4b\x8d\xe7\x66\x2a\xd9\x8c\xb7\x45\x29\xad\x85\xcc\xb9\x32\x41\x8c\x2f\x5f\x09\xa3\x30\x0a\xe3\x64\x3d\x8a\x22\xac\x4d\xcf\x4e\x8e\xfc\x64\x32\xfb\xfe\xd9\xbf\xd8\x9f\x9d\x1c\x9f\xbd\xfa\xd6\xba\x5f\x3a\x85\x49\x69\xa6\xbe\x03\x33\x18\xa4\x4b\x9a\x25\x27\x32\x92\x8a\x18\xae\x1b\xeb\x20\xc8\x8c\x75\x1d\xd0\xed\xb5\x5b\x24\xf3\xb5\x1b\x37\x21\x60\x1a\x1a\x47\x42\x2a\xc5\x9d\x05\xd7\x0c\x57\x92\x15\xa9\x7a\x07\x41\x4b\x48\xa5\xc4\x58\x0c\x16\x52\xbd\xfb\x47\x38\x95\x3d\x9f\xcb\x2a\x30\x55\xac\x1d\xc1\x3d\xac\xec\x06\xe7\x78\x21\xbc\x74\x31\x00\x0c\x62\xb8\xcf\x24\x1f\x34\x97\xe1\xd9\xc7\xe9\xee\xa7\xe9\xbb\x27\xb3\xe3\xc7\xfe\xf9\xe9\x8f\x83\x0f\xff\x9f\x6b\x65\x31\xed\x2d\xe1\x35\x29\xb6\x88\x6d\x3d\x50\x1c\xc6\x1d\x76\x37\xca\x4d\x96\x8a\x20\x68\x6a\x46\xed\x57\x07\x7f\xd5\x14\x05\xf5\x1b\xa7\x2b\x73\x7a\x65\x11\xc4\x4e\xef\x67\x00\x00\x00\xff\xff\xb6\x41\xcd\x56\x24\x03\x00\x00"

func assetsResourcesAmprobeNginxConfDAmprobeConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxConfDAmprobeConf,
		"assets/resources/amprobe/nginx/conf.d/amprobe.conf",
	)
}

func assetsResourcesAmprobeNginxConfDAmprobeConf() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxConfDAmprobeConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/conf.d/amprobe.conf", size: 804, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxMimeTypes = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x97\x61\xcf\xe3\x26\x0c\xc7\xdf\xdf\xa7\xe0\xfd\x44\x9f\xd3\x3d\x9d\x6e\xd3\x7d\x1a\x4a\x1c\x42\x8b\x83\x0f\xd3\x84\x75\xda\x77\x9f\x92\xb4\xd7\xa4\x71\x52\x6d\x48\x55\xd3\xf0\x33\xf0\x37\xb6\xa1\x5f\xf2\x5f\x04\xac\xfe\xfe\xa2\x94\x52\x19\x4a\xfe\x68\x32\x06\xb5\xd7\x46\xa0\xc9\xa8\x78\x78\xfa\xf1\xb4\xb4\xcc\xbb\x86\xca\x32\xcf\xf0\xf2\x66\x1e\x55\x1e\xa3\x7b\x34\x0e\x3e\x9c\xaf\x77\x71\xe7\xeb\x39\x7e\x26\x70\x7b\xf8\xd8\x7f\x26\x37\xd9\x18\xa2\xe0\xad\xc9\x3e\xb6\x1f\x67\xd3\x19\xb6\xc9\x53\x5e\xd9\xf0\x9a\x36\x39\xe2\x6f\xa2\x96\xa1\x67\xcd\x27\x66\x19\x57\x69\x70\xcf\xd3\x3f\x68\x72\xb3\xeb\x22\x5c\x78\x9f\x82\xf1\xed\x9e\xe0\x5c\xf2\x0c\xef\xda\xea\xc0\xd7\xf6\x70\xfe\x86\x70\x30\x44\xba\x82\x49\x73\x4c\x77\xad\xa6\x7a\xc1\x7b\x43\x87\x7e\x6b\x45\xfd\x62\x31\x45\xdb\x88\x14\x5b\x68\x57\x3e\x9c\x5a\x93\xed\x5d\xeb\xb4\x5b\xd4\xee\x6e\x96\xa2\xd6\xcd\x37\x37\xfb\x7a\x37\x18\xb2\xaf\x87\xcf\x22\x20\x7e\x49\x38\x21\x89\x0a\x4e\x48\x73\xbe\x68\x6f\xe3\x8e\x47\xbd\x8d\x4b\xfc\xbc\xab\xe1\xbc\x54\x50\x34\xb2\xde\x58\xc9\xd0\x5e\x16\xc3\x9d\xdb\x88\x9a\xa9\x71\xe7\x86\xcf\x6d\x6e\xd3\xc3\x69\x73\xf8\x51\x30\x9c\xe8\xbe\x09\xf3\x00\xad\x63\x9b\x75\x1f\x05\x07\x0f\x2f\xe5\x74\xd1\x26\xd9\xc6\x77\xf0\x22\xd9\x24\xd5\x9b\xa4\xc0\x24\xc1\x8c\xb7\x9c\x3b\xf4\xac\x79\x34\x56\x9f\x7c\xdb\x40\x39\x7e\x5d\xf2\xcd\xcf\x22\xe0\xdc\xc7\x54\x49\xc3\x57\xd1\xae\x71\xaa\xb6\xe2\x89\x2a\x41\x33\x45\xce\x72\x89\x20\x56\x40\xac\x8c\x17\x32\x3f\x6f\xcd\x91\xb2\x30\xc7\x10\xaf\xc3\x6f\x38\x20\x81\xbb\xa6\xe7\xe6\xe3\xe7\xf5\x0f\x99\x47\xd6\x50\x2c\xbc\xc4\x49\x09\x42\xdd\xba\xe3\xc3\x6e\xc7\xd3\x19\xec\x53\x09\xc4\xbc\x89\x53\xec\x21\x51\xf4\xb3\xbc\x26\xda\xc0\xef\xf5\xc2\x2e\x17\x33\xbc\x91\x79\x17\xa3\x0b\xa0\xc1\xa4\xdc\x1c\x2e\x18\xa6\x80\xbf\x3c\x0a\xcb\x1b\xfc\x36\x0d\x7f\xc1\xdb\x1a\x2f\xfa\xfb\x6d\xac\x48\x09\x98\x61\x1e\x15\xdf\x45\xda\x46\x1b\x8d\xb0\x4f\xf6\x91\xf2\x4b\x7c\x9e\x01\xba\x7a\x96\xa6\xb3\x49\x95\x97\x52\xe6\x6e\x72\x6e\x03\xe9\xda\x87\x59\xda\x0c\xaf\x24\x1e\xcd\x05\x18\xc2\x2a\x80\xd2\x55\x48\x95\xa2\x09\x92\x58\x2b\x28\x28\x12\xce\xa4\xa2\xc9\x87\x28\x95\x6a\x4a\x56\x51\x75\x92\x4c\x92\x49\xa2\x4f\x93\x94\xed\x45\x27\xa8\x1a\x93\x35\x19\x7b\x31\x0e\x34\x9a\xd6\x38\x48\x4a\x25\x79\x41\x0c\xd2\x06\x28\xc5\x60\x44\xbc\x89\xf6\xd2\x9b\x0e\x74\x1d\x0c\x37\x4f\xbc\x17\xdd\xcf\xf9\x5a\xd7\x7e\x2d\x98\xbd\x10\xcb\x45\x67\x2b\x57\xde\xe1\x7d\xbe\x48\x16\xe5\xf7\xaf\x7f\x6a\x6b\xb4\x85\xb4\x98\xa5\x82\xa4\x08\x50\xd9\x24\x4e\x54\xc8\xb7\x9c\x4d\x78\x9d\xae\x90\x50\x4f\xca\x70\xff\x12\x4f\x85\xf2\xbc\x99\x2d\x0c\x98\x6a\xf9\x14\x19\x7a\xd6\xfc\xcd\x6f\x9d\x1f\x37\x2f\x9d\x1c\xd1\x66\xc8\x9a\x73\x02\x83\x4b\xfe\xe4\x5b\x05\x05\x54\x15\x84\x65\x6d\x9b\x55\x20\x44\xde\x0e\x8e\xc2\x6d\x6e\x1b\xf7\x1c\x95\xff\x6f\x26\xc8\x5e\x21\x93\x42\x46\x41\xff\x50\x95\x22\x41\x5b\x30\xd4\x31\xa1\xc9\xac\x63\x5d\x7b\x0b\x55\xb4\x57\x84\x36\x1f\x86\x33\x89\x52\xb4\xc0\xec\x5b\x87\xe1\xf0\xe8\x51\xd3\xc1\x24\x1c\x64\xef\x07\x65\x4a\x60\x2a\x6e\x00\x32\x86\xc3\xf8\x3d\xdb\xd9\xc0\xff\x6b\xd0\x21\xad\xa1\xcd\x23\x8e\x61\xf1\x73\x2c\xf9\xe5\xa1\xff\x5a\xf9\xf8\x81\xbe\xf2\x1b\xa1\x32\xf9\xcd\x57\x6a\x64\x2e\xbf\x8a\xc3\x64\xf7\xe6\x92\x8e\xf4\x39\xc7\xa3\xdb\xbf\x25\x46\xe7\xe6\x78\xd1\x78\x94\xab\xc8\x7d\xf4\xa3\x59\xe2\x09\x4c\x18\x9f\x45\x3c\x99\xbb\xe6\xce\x57\x10\x3f\x3e\x1d\xed\x5e\xaf\xc6\xfe\x4f\x77\x2f\xe7\x93\x0d\xd2\xb7\x8d\x0b\xf1\xd4\x32\x2f\xe9\xe3\xae\x5c\xa4\xe3\x12\x7f\xe7\x4c\x70\x0a\x1f\xff\x78\x26\x9b\x9f\x57\x6f\x2f\xd9\x23\x6c\xd9\xc4\x6e\x8e\xf7\x70\xc2\xbd\x29\x86\xfe\x39\x5f\x74\x1d\xba\x1d\xbe\x0e\xdd\x12\xc7\xe3\x1e\x8e\xc7\x57\x7c\xf7\xca\x8d\xad\x7b\xc1\x59\x1b\xde\xfc\xe3\x60\xb8\x28\xc3\xf5\xca\xa4\xc7\xcd\x35\xf5\xf8\xba\x20\x1e\x9f\xb6\x66\xe8\xfc\x8f\x2f\xff\xfc\x1b\x00\x00\xff\xff\xc3\xd7\x35\x80\x74\x0f\x00\x00"

func assetsResourcesAmprobeNginxMimeTypesBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxMimeTypes,
		"assets/resources/amprobe/nginx/mime.types",
	)
}

func assetsResourcesAmprobeNginxMimeTypes() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxMimeTypesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/mime.types", size: 3956, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxNginxConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xdd\x8a\xe3\x3c\x0c\xbd\xf7\x53\x88\x10\x28\x7c\x30\xcd\x7c\xa5\x3b\x37\x79\x94\x65\x31\x1e\xfb\xa4\x63\xc6\x7f\x2b\x2b\x6d\xb3\xcb\xbe\xfb\xe2\x26\x1d\x86\x61\xab\x2b\x45\xe7\x48\xca\x39\xd6\x25\xf3\x3b\x58\x17\xce\x16\xb5\xa2\xd2\x61\x54\xce\x20\xe6\x44\x79\x9a\x46\xa5\xc0\x9c\x59\x87\x7c\x22\xaa\xe2\xc0\x4c\x17\xc3\x69\x54\xaa\x78\x47\x5b\x0c\x67\xc3\x03\xcf\x69\x48\x27\x9f\xae\xfb\xe2\x5d\x6b\x3c\x23\x49\xa5\xdf\xaa\x31\xb6\x35\x36\xa7\x04\x2b\x3e\xa7\x4a\xf4\xff\xf3\xe1\x38\xaa\x3f\x4a\xbd\x89\x94\x8d\xe7\x93\x0d\xb3\x03\x0d\x10\xbb\x4e\x1b\xa2\x8f\xd8\xcb\x52\x50\xc7\x1b\xc5\x61\x32\x73\x10\xdd\x4a\x64\x4a\x09\xde\x9a\x36\x71\xc8\x56\x20\x4f\x55\x18\x26\x8e\xea\xc6\x0d\xf9\xa4\xa7\xcc\xd1\x08\x45\xe3\x13\xed\x7a\x46\xcc\x02\x6d\x9c\x63\x7a\xa2\xfb\xe7\x5c\xc1\xf4\xbd\x17\x1f\xa1\x43\xb6\x26\xfc\xa0\xae\x67\xfc\x9c\x51\xa5\xa3\x9d\xa2\x7f\xc4\xae\xaf\x62\x64\xae\xd4\xbf\x66\xb7\xe8\xd7\x45\x50\x75\x45\x12\xea\xfa\xa6\x48\x33\x26\x30\xb8\x7b\xd0\xbe\xb1\xda\x6a\x6d\x4e\x48\xd2\xdd\x1b\xaf\xed\x9f\x2f\x86\x1d\x5c\xcb\xba\xdd\x2a\xa6\x22\xb9\xc9\x07\x50\x4e\xab\x13\x62\x8b\x4e\xb9\xcc\xf5\xed\x4b\xc9\x21\x98\xe5\xa3\xf6\x0e\x14\x13\xfc\x19\xba\xe9\xcb\xb3\xd0\xcb\xb7\xcd\x9f\xc2\xf9\xba\xdc\x5f\xe5\x03\x3e\x1c\x9f\x37\xaf\x57\xbc\x2d\x7e\x08\x32\xcc\x57\xf0\x86\xda\xe0\x91\x44\x47\x73\xd5\x37\x7f\xaa\xff\x05\x7a\x39\xc6\xf1\x33\xba\x3a\x37\x4f\x13\xf8\x13\xe1\xd1\x25\xd8\x9c\xa6\xbd\x1b\xfe\xdb\xb7\xa4\x5d\xce\xdf\x00\x00\x00\xff\xff\x70\x8c\xc5\xd0\xbd\x02\x00\x00"

func assetsResourcesAmprobeNginxNginxConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxNginxConf,
		"assets/resources/amprobe/nginx/nginx.conf",
	)
}

func assetsResourcesAmprobeNginxNginxConf() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxNginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/nginx.conf", size: 701, mode: os.FileMode(420), modTime: time.Unix(1729096020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/resources/amprobe/configs/config.toml":       assetsResourcesAmprobeConfigsConfigToml,
	"assets/resources/amprobe/configs/model.conf":        assetsResourcesAmprobeConfigsModelConf,
	"assets/resources/amprobe/nginx/cert/fullchain.pem":  assetsResourcesAmprobeNginxCertFullchainPem,
	"assets/resources/amprobe/nginx/cert/privkey.pem":    assetsResourcesAmprobeNginxCertPrivkeyPem,
	"assets/resources/amprobe/nginx/conf.d/amprobe.conf": assetsResourcesAmprobeNginxConfDAmprobeConf,
	"assets/resources/amprobe/nginx/mime.types":          assetsResourcesAmprobeNginxMimeTypes,
	"assets/resources/amprobe/nginx/nginx.conf":          assetsResourcesAmprobeNginxNginxConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"amprobe": &bintree{nil, map[string]*bintree{
				"configs": &bintree{nil, map[string]*bintree{
					"config.toml": &bintree{assetsResourcesAmprobeConfigsConfigToml, map[string]*bintree{}},
					"model.conf":  &bintree{assetsResourcesAmprobeConfigsModelConf, map[string]*bintree{}},
				}},
				"nginx": &bintree{nil, map[string]*bintree{
					"cert": &bintree{nil, map[string]*bintree{
						"fullchain.pem": &bintree{assetsResourcesAmprobeNginxCertFullchainPem, map[string]*bintree{}},
						"privkey.pem":   &bintree{assetsResourcesAmprobeNginxCertPrivkeyPem, map[string]*bintree{}},
					}},
					"conf.d": &bintree{nil, map[string]*bintree{
						"amprobe.conf": &bintree{assetsResourcesAmprobeNginxConfDAmprobeConf, map[string]*bintree{}},
					}},
					"mime.types": &bintree{assetsResourcesAmprobeNginxMimeTypes, map[string]*bintree{}},
					"nginx.conf": &bintree{assetsResourcesAmprobeNginxNginxConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

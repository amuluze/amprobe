// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/resources/amprobe/configs/config.toml
// assets/resources/amprobe/configs/init.yaml
// assets/resources/amprobe/nginx/nginx.conf
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsResourcesAmprobeConfigsConfigToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x54\x41\x53\x1a\x49\x18\xbd\xf7\xaf\xe8\x1a\x2e\x7a\x51\x34\x9b\x32\x17\x0f\x1a\xcc\x6a\xad\xee\x5a\xc1\x3d\x51\x54\x6a\x94\x16\xa6\x80\x99\xd9\x99\x86\xe8\x0d\x6b\x55\x24\x11\xc1\x15\x82\x0b\xc4\xe8\xaa\x11\xb3\x2b\x98\xdd\x94\x6b\x64\x94\x3f\x33\xdd\x3d\x73\xe2\x2f\x6c\xf5\x0c\x82\x58\x5b\x81\xcb\xd4\xd7\xdf\x7b\xdd\xfd\xbd\xf7\x3a\xf0\x42\x5a\x44\x5a\x10\x78\x60\x04\x63\x95\x55\x76\x49\xfe\x2f\x52\xbd\x24\xef\x53\x60\x5a\xd1\x31\x1c\x87\x82\x77\xc8\xf9\x0b\x7d\x3d\xec\xcf\x06\xc9\x1d\x83\x79\x45\xe3\x3d\xcf\xbc\x5e\x6f\x67\xd9\x34\xf6\xed\xca\x06\xd9\xf8\xc7\x2e\x5d\xb0\x8b\x0c\xb9\xdb\xb0\xae\x36\x68\xe9\x8a\x96\xae\xec\x62\x6b\x80\x64\x8b\xe6\x6d\x96\x9d\xfd\x36\x08\xfc\x91\x04\x0e\x29\xaf\xe5\x05\x29\x8e\x94\x04\xa7\x79\xe2\x05\x7e\x94\x44\xda\x34\x12\x43\x48\xe3\x7b\xab\x9a\xb2\x88\x04\x30\xa1\xaa\x3f\x8a\x71\xf4\xa0\x32\xaf\xa1\x65\x45\x8b\xc2\x71\xb8\x2c\xc6\x74\x04\x40\xe0\xa5\xba\x14\x04\x13\xa1\x90\x86\x74\x9d\x37\x0e\x8b\xaa\x3a\x2c\xc6\x93\x68\x09\x2b\xda\x90\xae\x2c\x45\x11\x16\x00\xf0\x40\x5a\xbc\xa4\xd9\x3a\xb9\xd9\xa3\xef\xd2\x66\xf3\x8a\x5c\xec\xd3\xc2\x1d\x3f\xd4\x6d\x9d\x95\xd7\xed\x0d\xfe\x01\x3c\xd0\xae\xa6\xac\x8f\x6b\xac\xb2\x4b\x77\xce\x58\x79\x9d\x1d\xaf\xb1\xca\xbe\x55\xbf\x23\x27\xe9\x6e\x0f\xa9\x97\x69\xe9\xca\x6c\x36\xc9\x9b\x23\x9a\x39\xb3\x8e\xb6\xed\xd2\x17\xbb\x5c\xe8\x34\x04\xbe\x57\xb4\x38\x9f\x2d\xdd\x6f\x90\xfc\x47\x62\xa4\x48\xbe\x61\x5d\xfe\x6a\x35\x8a\xb4\x76\x44\x8c\x1c\xf0\xa1\xc5\x44\x18\x8e\x43\xac\x25\xd0\xc3\xa3\xb1\xcf\x4d\x72\xf0\x76\x80\x55\xea\x24\x93\xa5\x85\x06\xdd\x5e\x63\xe5\xf5\x47\xcb\x6d\xa3\xac\x2a\x3a\x0e\x6b\x48\x1f\x04\xbe\xc9\x85\x55\xd5\x99\x90\xfe\x4b\x4c\xc2\x88\xcb\x65\xd5\xef\xd8\x6d\xdd\x6a\x1d\xd0\x9d\x53\x92\x6b\x98\xcd\x53\x3b\x9d\x65\x85\x1a\xa7\xaa\xa6\xec\x62\x8b\x8b\x52\xfa\xd2\x11\xa5\x6d\x94\x1d\x5d\xe6\xc4\x95\x59\x69\x19\x61\xc9\x19\xf8\xd8\xa8\x23\xad\x4b\xd5\x3b\x80\xc3\x40\x4e\xce\x68\x66\x8f\x18\x29\x77\x0b\x5a\xbc\xe4\xe0\x9f\x54\x24\x3f\x57\x64\x99\xab\x30\xf2\xb4\x07\x66\xe7\x37\x76\xe9\xef\x4e\xeb\xe7\x43\xf3\xfa\xa2\xcb\xd2\x87\x9f\x09\xc5\xd0\x3d\xde\x81\x77\x77\xb5\x8e\x6a\x24\x9f\x25\x99\x2c\x33\x52\x60\x41\x5c\x8c\x21\x6e\x03\x69\xc5\xb9\xf5\x2b\xa1\x37\xe8\x7c\x83\x15\x6a\x56\xfa\x13\x79\x53\xa3\xfb\x87\xe4\x72\xfd\x21\x05\x6b\xee\xd1\x83\x75\x30\x25\x73\x82\x89\x04\x56\xe6\xa4\xb0\x26\x62\x74\x2f\x03\x08\xf8\x26\xb9\x68\x9d\xb9\xf5\x87\x41\xe8\x2e\xf4\x27\xc0\x59\x60\x85\x1a\xdd\xfa\x97\xe4\xb3\xe0\x67\xdd\xf5\x2f\xaf\x92\xc6\x26\x3b\x5c\x03\xf3\xa2\xae\xbf\x56\xb4\xd0\x7d\xb9\x7b\x24\xe0\x9b\xbc\x37\xb7\xe3\xd9\x8e\xc3\x3d\xd0\xef\x9f\xed\xd8\xc4\xef\x9f\x9d\x53\x42\xc8\x85\x82\x80\x4f\xd2\xa3\xc1\x6f\x5b\xb4\x6d\x6c\xbb\x8a\xd3\xc3\xaf\x34\x5b\x87\x31\x7d\x31\x16\x85\x64\xf7\xd6\x6c\x9e\xd0\x0f\xa7\xac\xfa\x16\xf8\x50\x52\x5a\x42\x7c\xca\x01\x21\x19\x12\x47\x85\x20\x00\x81\x29\x1c\x41\x9a\x8c\xf0\xff\xd1\xdf\xee\x92\xdc\x71\x97\xd8\x4e\x95\xad\x56\x1a\x4a\xcb\x4b\x8a\xbc\x2c\x85\xfb\xb9\xf9\x85\x5c\x66\x84\x23\x5e\x87\x79\x41\x74\x0f\x6d\x5e\x37\x69\xf5\xc6\x65\x75\x67\xc0\x53\x97\x4e\xdb\x95\x4d\xfb\x8f\x5d\xb6\x93\x06\x33\x32\x46\x5a\x52\x8c\x39\x2f\x02\xf4\x40\xd7\x9e\x50\x07\x20\x30\xab\x84\xc3\xfc\xb9\x7a\x21\xc5\x1e\x0d\x6c\x28\xa6\x84\x05\x30\x8b\x92\x88\xe3\x84\x10\x0f\x96\x00\x5e\x2a\x58\xc4\x92\xe2\xbc\x31\xbc\x3c\x22\x40\xe7\xe7\x81\xb4\x91\x23\x27\xe7\x64\x2b\x4d\xb6\x36\xcd\xeb\x94\x79\xfd\x89\x96\x4e\x49\xab\xe4\x3e\x0a\xdc\x87\x13\x61\x07\x32\xd6\x81\x74\x81\xdc\xb1\x65\xb3\xf5\x9e\x15\x7f\x87\x63\x90\x9c\x9c\x73\x1b\x3b\x58\x00\x02\x13\x09\x1c\x09\x3e\x32\x62\xc7\x6a\xbd\x98\xb3\x8b\x3b\x92\xcf\xd2\x77\x5f\x89\x91\x1b\x70\xd3\xdd\x36\xca\xd3\xfe\xa7\x23\xa3\xc3\xd3\xfe\x27\xcf\xbe\x1b\x76\xbe\x07\x81\x5f\x0a\xcb\x92\x1c\x9e\x43\x38\xa2\x38\xc6\x71\xea\x42\x97\x22\x8a\x56\xef\x7b\x7e\x40\xab\xbc\x41\x8c\x77\xed\x63\xb5\xd2\xb4\xfa\xc1\x8d\x78\xdb\xd8\xea\xbe\xbc\x6d\x23\x03\xa6\x56\x54\x49\x43\xa1\x5e\xbe\xa3\x68\x15\x76\x82\xd5\xcb\x94\x98\xc0\x91\x57\x02\x00\x20\x30\x23\x4b\xd8\x27\x62\x31\xf8\xe8\x2e\xbc\xfe\xdc\xd1\xbf\x4f\x11\xd7\x12\xfa\xb0\x24\x4b\x78\x68\x55\x8c\xc7\x04\xf0\x5f\x00\x00\x00\xff\xff\xb2\xcb\x36\x57\x69\x06\x00\x00"

func assetsResourcesAmprobeConfigsConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsConfigToml,
		"assets/resources/amprobe/configs/config.toml",
	)
}

func assetsResourcesAmprobeConfigsConfigToml() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/config.toml", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1721555593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeConfigsInitYaml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x2d\x4e\x2d\x2a\xb6\xe2\x52\x50\xd0\x55\x00\x31\xf3\x12\x73\x53\xad\x14\x12\x53\x72\x33\xf3\xb8\x14\x14\x14\x14\x0a\x12\x8b\x8b\xcb\xf3\x8b\x52\xa0\x62\x86\x46\xc6\x26\xa6\x66\x60\x99\xe2\x92\xc4\x92\xd2\x62\x2b\x05\x43\x30\x2f\xb3\x38\x1e\xac\x00\xc2\x47\x31\x2b\xb7\xa0\x28\x3f\x29\x15\xcd\x34\x22\x0c\x32\xe0\x02\x04\x00\x00\xff\xff\xc2\x1e\x74\xc4\x9c\x00\x00\x00"

func assetsResourcesAmprobeConfigsInitYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeConfigsInitYaml,
		"assets/resources/amprobe/configs/init.yaml",
	)
}

func assetsResourcesAmprobeConfigsInitYaml() (*asset, error) {
	bytes, err := assetsResourcesAmprobeConfigsInitYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/configs/init.yaml", size: 156, mode: os.FileMode(420), modTime: time.Unix(1721555593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesAmprobeNginxNginxConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x94\x4d\x6b\xdb\x48\x18\xc7\xef\xfa\x14\x0f\xb1\x0f\xbb\x0b\xd1\xc8\xd9\x78\x37\x44\xec\x69\x61\xd9\xbd\x2d\x0b\x81\x3d\x55\x4c\x35\x8f\xed\x21\x92\x66\x78\x66\xfc\x12\x4a\xa0\x97\xb6\xa1\x25\x6d\x03\xa1\x90\x92\xe2\x06\x4a\x09\xa5\xc4\xed\xa1\xe4\x10\xf2\x71\xe4\xd8\xdf\xa2\x8c\xa4\x38\x89\xeb\x34\x74\x0e\xa3\x19\xfd\x7f\xcf\x0b\x7f\xcd\xa8\xaf\x68\x13\x29\xd2\xa4\x62\x34\x06\x0d\x40\x23\xf4\x04\xc7\x54\x65\xa0\x5a\xad\xd0\xf3\x90\x48\x51\x94\xa8\x36\x00\xeb\x71\x62\x89\x6a\xb3\xac\x2d\xb3\x01\x2b\x14\xdf\x29\x7d\x4e\x59\xe8\x69\x29\xa0\x1a\x05\x49\xdd\xac\x24\x7d\x2d\x85\xcb\xd4\xc3\xcc\x1a\x78\xe0\x39\xa2\x2a\x1c\xab\x2c\xc3\xd8\x4a\x95\xb9\xd2\xc1\xca\x6a\xe8\x6d\x7b\x5e\xc7\x5a\x5d\x71\x32\x8b\x93\xae\xc0\xcb\xbc\x68\xe3\xaa\x7a\x2a\x53\xf4\xed\x96\x46\x13\x16\xa0\xc0\x16\xef\x26\x36\x72\xaf\x00\xb8\xd6\x89\x8c\xb9\x4b\xcc\x54\x6c\xd1\x2e\x1b\x4b\xc8\xd3\xd0\x2b\x60\x83\x99\x68\xc9\xe4\x32\x2d\xa8\xac\x4c\xb2\x89\xa8\x79\x22\x7b\x18\x59\x99\xa2\xea\x5a\x80\xdf\x9a\xb3\x18\xea\x21\x55\x6d\xb9\x91\x48\x63\x31\xab\x36\x6b\x41\x38\x13\x4a\x32\xca\x78\x8a\x00\x89\x8a\x79\xd2\x51\xc6\x86\x50\x83\xf1\xe1\x6e\xfe\xf4\x28\x3f\x38\xce\x0f\x3f\xe5\x6f\x1e\x8e\x77\x5e\x5d\x9c\xed\xe5\x27\xaf\xf3\xe1\x30\x7f\xb9\xeb\x5d\xa5\x56\x65\xef\xc0\xb8\xd6\xd7\x4a\xba\xc1\x13\xc9\x8d\xf3\xa2\x6b\x88\x99\x0e\x27\xac\x1c\xe9\xd8\x34\x71\x7c\x78\x03\x97\x99\xc0\x41\xf5\xf0\x1d\x72\x53\xb6\xb4\x15\x39\x27\x0c\xd4\xbb\x24\x8b\x89\x15\x55\xd9\xa2\x88\xed\x5b\x5a\x64\x5c\x4b\x36\xd7\xa7\x26\x35\xd8\x8a\x34\x37\x06\xdc\xf7\x5c\x67\xac\xb1\xf2\xbb\x1f\xf8\x81\xdf\x58\x5f\x0b\x82\x80\x85\x50\x9b\x9c\x1e\xe7\xc3\xe1\xe4\xfc\x63\xfe\x62\x6f\x72\x3a\xba\xd8\xff\x5c\x1a\xb3\x20\x11\xa1\x90\x84\xb1\x2d\x8f\xe5\xb7\xba\x41\x1b\x75\x90\x0b\x24\xf8\x5b\x19\x0b\xf5\xc2\xf3\xef\x83\xff\x2f\xff\x87\x3c\x59\xfe\xe7\x5f\xa8\x13\xa6\xca\x62\xc4\x85\xa0\x3b\x83\xfe\x52\xd4\xe7\x24\x50\xb8\x15\xd4\x4b\x82\x0b\x11\x0d\xa2\xd6\xa5\xe4\x56\x77\xf8\xd6\x37\xf3\x96\xd5\x80\xb0\x4f\xd2\x22\xdc\x63\x7d\xb3\x41\x09\xfb\xc9\xff\xe5\xe7\x3a\xb0\x7a\x03\xee\x13\xf2\xcd\x10\x6a\xe3\x67\xef\xc7\x3b\x1f\xc6\x6f\x9f\x4c\x46\x8f\xf3\xe7\x67\xd3\x83\x77\x3f\xe6\x7a\xdf\xb0\xd0\x5b\x10\xe2\xe8\xa8\x87\x64\x5c\x6f\x0d\xbf\xb1\x10\xba\x66\xc3\x86\x6e\x13\x17\x08\xf5\x22\xb0\x5b\xee\xee\xb0\xee\xcf\xd9\x6d\x87\xa5\x2a\x62\x69\xa1\x49\x35\x98\xee\x1f\x4c\x46\xa3\xe9\xd1\x97\xe9\xa3\xdd\x8b\xf3\x93\x99\x52\xfe\x8e\x34\x6f\xbb\xbb\xdb\x0c\x02\x68\x06\x2b\xd0\x0c\x7e\x85\x66\xb0\x0a\xc0\x9a\xc1\xfc\x91\x9d\xf9\xfd\xc7\x95\x3a\x67\x3b\x29\x65\x6f\xbb\x50\xd7\xdb\x2b\xe7\x6d\xef\x6b\x00\x00\x00\xff\xff\x85\x80\x15\xb3\x35\x05\x00\x00"

func assetsResourcesAmprobeNginxNginxConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesAmprobeNginxNginxConf,
		"assets/resources/amprobe/nginx/nginx.conf",
	)
}

func assetsResourcesAmprobeNginxNginxConf() (*asset, error) {
	bytes, err := assetsResourcesAmprobeNginxNginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/amprobe/nginx/nginx.conf", size: 1333, mode: os.FileMode(420), modTime: time.Unix(1721555593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/resources/amprobe/configs/config.toml": assetsResourcesAmprobeConfigsConfigToml,
	"assets/resources/amprobe/configs/init.yaml":   assetsResourcesAmprobeConfigsInitYaml,
	"assets/resources/amprobe/nginx/nginx.conf":    assetsResourcesAmprobeNginxNginxConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"amprobe": &bintree{nil, map[string]*bintree{
				"configs": &bintree{nil, map[string]*bintree{
					"config.toml": &bintree{assetsResourcesAmprobeConfigsConfigToml, map[string]*bintree{}},
					"init.yaml":   &bintree{assetsResourcesAmprobeConfigsInitYaml, map[string]*bintree{}},
				}},
				"nginx": &bintree{nil, map[string]*bintree{
					"nginx.conf": &bintree{assetsResourcesAmprobeNginxNginxConf, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

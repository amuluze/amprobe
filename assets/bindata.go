// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/resources/configs/config.dev.toml
// assets/resources/configs/config.toml
// assets/resources/configs/model.conf
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsResourcesConfigsConfigDevToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x95\x6f\x53\x1a\x47\x00\xc6\xdf\xef\xa7\xd8\x39\xdf\xe8\x4c\x27\x60\x12\x13\xdf\xf8\x42\x83\xad\x99\x62\xe3\x04\xfb\x8a\x61\x32\x67\x58\xe1\x46\xb8\xbb\xde\x2d\x44\xa7\x93\x19\x32\xd5\x00\x69\x29\xb4\x82\x58\x34\xc6\x4c\xb5\x62\x5a\x38\xd2\x76\xd4\xea\x09\x5f\x86\xbd\x85\x57\x7c\x85\xce\xee\x1d\xff\xcc\xa4\xa4\xa7\xc3\x30\xec\x3e\xbf\x5d\x9e\x7d\xf6\xc1\xff\xb9\xb4\x82\xb4\x00\x58\x50\x74\x0c\x67\xa0\xe0\xbe\xc5\xff\x04\xc8\x9f\x31\x18\xc6\x58\xa5\x7b\x3f\x91\xdc\x1f\x64\xbf\x46\x5e\x27\xc0\x92\xa2\xb1\x89\xd3\x6e\xb7\x1b\xf6\x9f\xc1\x89\xf4\x77\x83\x64\x7f\x05\xbe\x70\x0c\x07\x95\x67\xf2\xb2\x14\x45\x4a\x8c\x69\xee\xb8\xbb\x13\x9b\xe6\x6e\x7b\x6f\x8b\x6c\xfd\xd5\x2e\x56\x68\x25\x4d\xea\x5b\xad\xb3\x2d\xab\x78\x66\x15\xcf\xda\x85\xc6\x38\xc9\x14\x9a\xd7\x19\x7a\xf2\xf3\x04\xf0\xa1\x38\xd2\x16\x90\x18\x44\x1a\xdb\x9e\xaa\x29\x2b\x48\x00\xb3\xaa\xfa\x95\x18\x45\x03\x9f\x2c\x69\x68\x55\xd1\xd6\xe0\x0c\x5c\x15\x23\x3a\x02\xc0\xff\x85\xa2\x45\x03\xc0\x83\x56\x62\x21\x38\x03\xb1\x16\x43\x10\x0e\xed\xd8\xda\x35\x48\xee\x37\x62\x26\x48\xce\x68\xd5\xbe\x6b\x19\x05\xab\xfc\x96\x98\x59\xe0\x99\x5b\xde\x50\x39\x5c\xff\x26\x22\x61\x24\x0c\x68\x0a\x35\x2b\x53\x25\x97\xdb\xf4\xfd\x15\x39\xf8\x7e\x9c\xee\x55\x49\x3a\x63\xe5\x0d\xeb\x87\x17\xb4\xb4\x79\x63\xb8\x63\x96\x54\x45\xc7\x21\x0d\xe9\x9f\x41\x9b\x35\x01\x16\xc5\x75\xaf\xb4\x8a\xb0\xc4\xf7\x7f\xff\x76\xcf\xc7\x31\xd8\xaa\xd6\xe9\x75\xb5\xd5\x38\xb0\x7e\x3c\x26\x59\xa3\x79\x75\xdc\x4e\x66\x68\xbe\xcc\xc8\xfb\x89\x76\xa1\xc1\xfc\x29\xfe\xed\xf8\xd3\x31\x4b\xdc\xa2\x45\x71\xfd\x91\x8a\xe4\x07\x8a\x2c\xeb\x70\x06\x4e\x4e\xdd\x04\xf6\x77\xc5\x39\xe4\xe8\xc4\x4a\x6f\x13\x33\x61\x2f\x64\x15\x6a\x0c\xf1\x30\x18\x41\x5d\x44\x8f\xd0\x43\xd0\xd3\xcb\x76\xf1\x4f\x47\xf0\xfe\xb0\x79\x51\xe9\xb1\xfa\x94\x65\x71\x25\x82\xd8\x41\x48\xeb\xdc\xbc\x27\xc2\x87\xbe\xb5\xde\x96\x49\x2e\x43\xd2\x19\x6a\x26\xc0\xbc\xcc\x14\xb3\x31\xac\x2c\x4a\x21\x4d\xc4\xa8\x7b\x50\xbd\xc3\xc9\x19\x34\x5f\x6e\x25\xdf\x91\x57\x65\x6b\xf7\x90\xd4\x36\x07\x41\xf4\x6a\xdb\x3a\xd8\x04\xc0\xef\x99\xeb\x07\x58\x80\xa3\x9e\x31\xe8\x38\x3c\x14\xe8\xff\x21\x74\x02\xfe\xb5\x6e\x67\xf2\x53\x84\x34\x5f\xb6\x52\xe7\x24\x97\x01\x4b\xa2\xae\x3f\x53\xb4\xe0\x68\xe5\x18\x24\xc6\x4b\x7a\xf8\x02\x78\xe6\xba\x61\x77\xb1\x35\x75\x97\x18\x8d\xb9\x3c\x48\x5f\xc3\x8a\xea\xe2\xf9\xb7\x5f\x85\x41\xa3\x81\xcf\xe7\x5d\x54\x82\xe8\x13\x76\x38\x06\x7d\x3e\xaf\x93\x7d\xe0\xf7\x2a\xa1\x00\x78\x14\xc3\x2a\xbf\xb3\x23\x96\xbc\x15\x51\x42\x7c\xd9\xe2\x31\x69\x14\x49\x65\xd7\xca\xd7\x5b\xe7\x06\xa9\x6f\x02\x2f\x8a\xa3\x08\x23\x04\xd9\x15\x1c\x65\x52\x17\x41\x2b\x69\x7a\x79\x02\x1e\x2b\x58\xc4\x92\x22\xb3\x3c\x8f\xb4\x97\x89\x8d\x2c\x39\x3a\x25\xa9\x24\x49\xbd\x6c\x5e\x24\x9a\x17\xef\x6c\x9c\xb5\x93\x6c\x5e\x9d\xb1\x7c\xcf\x86\xf8\x75\x1b\x0d\xe3\x38\x96\xec\x52\xb3\xf1\x9a\x16\x7e\x81\xf7\x21\x39\x3a\x65\x71\xe7\x44\x00\xfc\xb3\x31\x1c\x0e\x38\xe1\xfd\xb0\x5a\x86\xb3\x0b\x7c\x52\x48\x96\xe4\xd0\x22\xc2\x61\x85\x1f\xfa\x82\x6f\x6a\xf2\x36\xf3\x8c\x56\xea\x24\x97\xb1\x76\xfe\x21\x66\x76\xdc\xae\x90\x8e\x59\xe2\xc3\xae\x05\xdf\x9d\xe9\xbb\x2e\xfe\x7e\xa2\x8b\xf8\x12\x6d\x30\xbd\x18\x75\x0e\xbb\x87\x58\x43\x1b\x60\x7e\x5d\x95\x34\x14\x1c\x6e\x14\x27\xb3\x49\x6b\xff\x8d\xdd\x1c\x1d\x33\xd5\xeb\xd6\x8e\x99\x06\x8f\xd1\xaa\x86\xf4\x70\x5f\x3c\x7d\xef\xae\x9b\xb7\x34\x49\x9d\x5b\x3b\xb5\xff\xd2\xf6\x2f\xba\x18\xc3\xe1\x27\x03\x25\xb9\x86\x36\xa0\x73\xc3\x81\xff\x81\xa8\xaf\x48\xf2\xc7\xec\x1a\x36\xeb\x29\x9f\xdb\xeb\x6c\xde\xe4\x03\x53\x79\x90\x9c\x9c\xb2\xd2\xf0\x2a\x62\x70\x18\x38\x8c\x23\xd5\x92\xb5\xff\xc6\x6e\x0f\xf2\xea\xb0\x75\x7d\x4d\x2b\x3b\xb4\x70\xdc\x13\x3f\x94\x31\xd2\x64\x91\xa5\xf4\x9e\x9b\x7d\xe9\x8f\x08\x6c\x03\xd8\x7f\x29\x7f\xd3\x06\xe0\x5f\x16\xf5\xb5\x00\xe0\xac\x38\x67\x4d\x4e\xf5\x03\x37\x09\x3c\x92\xce\x7e\x96\xbe\x85\x1e\x14\x97\x9e\x22\xd6\xaf\x7e\x21\x1e\x14\x27\x85\xc0\x73\x30\x8f\xc3\x48\x93\x11\xe6\x13\xd8\x2d\xb7\x87\x11\x0e\xbb\x85\xc0\xf3\x7f\x03\x00\x00\xff\xff\x93\x3c\x1e\x9c\x9d\x07\x00\x00"

func assetsResourcesConfigsConfigDevTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesConfigsConfigDevToml,
		"assets/resources/configs/config.dev.toml",
	)
}

func assetsResourcesConfigsConfigDevToml() (*asset, error) {
	bytes, err := assetsResourcesConfigsConfigDevTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/configs/config.dev.toml", size: 1949, mode: os.FileMode(420), modTime: time.Unix(1746692887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesConfigsConfigToml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x94\x5f\x53\x1a\x57\x18\xc6\xef\xcf\xa7\x38\x83\x37\x3a\xd3\x89\x98\xc4\xc4\x1b\x2f\x34\xd8\x9a\x29\x36\x4e\xb0\x57\x0c\x93\x59\xc2\x11\x76\xc4\xdd\xed\xee\x81\xe8\x74\x32\x43\xa6\x1a\x20\x2d\x85\x56\x10\x8b\xc6\x98\xa9\x56\x4c\x0b\x4b\xda\x8e\x5a\x5d\xe1\xcb\x70\xce\x81\x2b\xbe\x42\xe7\x9c\x5d\xfe\xa6\x76\xe1\x82\x61\xdf\xe7\xb7\x67\x9f\xf7\x79\x5f\xff\xe7\x72\x10\xe9\x01\xb0\xa8\x1a\x18\xce\x42\x97\xfb\x8e\xf8\xb8\xa0\xb8\xc6\x60\x04\x63\x8d\xed\xff\x44\x72\x7f\x90\x83\x1a\x79\x9b\x00\xcb\xaa\xce\x0b\x67\xdc\x6e\x37\xec\x5f\x83\x85\xec\x77\x93\x64\x7f\x05\xbe\x48\x0c\x87\xd4\x17\xca\x8a\xbc\x8e\xd4\x18\xd7\xdc\x73\x77\x0b\x9b\xd6\x5e\x7b\x7f\x9b\x6c\xff\xd5\x2e\x56\x58\x25\x4d\xea\xdb\xad\xf3\x6d\x5a\x3c\xa7\xc5\xf3\x76\xa1\x31\x4e\x32\x85\xe6\x4d\x86\x9d\xfe\x3c\x01\x7c\x28\x8e\xf4\x45\x24\x85\x90\xce\x8f\xa7\xe9\x6a\x10\xb9\xc0\x9c\xa6\x7d\x25\xad\xa3\x81\x7f\x96\x75\xb4\xaa\xea\x6b\x70\x16\xae\x4a\x51\x03\x01\xe0\xff\x42\xd5\xd7\x03\xc0\x83\x82\xb1\x30\x9c\x85\x58\x8f\x21\x08\x87\x4e\x4c\xf7\x4c\x92\xfb\x8d\x58\x09\x92\x33\x5b\xb5\xef\x5a\x66\x81\x96\xdf\x13\x2b\x0b\x3c\xf3\x2b\x9b\x9a\x80\x1b\xdf\x44\x65\x8c\x5c\x03\x9a\x42\x8d\x66\xaa\xe4\x6a\x87\x7d\xbc\x26\x87\xdf\x8f\xb3\xfd\x2a\x49\x67\x68\xde\xa4\x3f\xbc\x62\xa5\xad\x91\xdb\x1d\xab\xa4\xa9\x06\x0e\xeb\xc8\xf8\x0c\xda\xac\x09\xb0\x24\x6d\x78\xe5\x55\x84\x65\x71\xfe\x87\x77\x7b\x3e\x8e\xc1\x56\xb5\xce\x6e\xaa\xad\xc6\x21\xfd\xf1\x84\x64\xcd\xe6\xf5\x49\x3b\x99\x61\xf9\x32\x27\x1f\x24\xda\x85\x06\xf7\xa7\xf8\xb7\xe3\x4f\xc7\x2a\x09\x8b\x96\xa4\x8d\x27\x1a\x52\x1e\xa9\x8a\x62\xc0\x59\x38\x35\x3d\x0a\xec\x9f\x4a\x70\xc8\xf1\x29\x4d\xef\x10\x2b\x61\x3f\x88\x16\x6a\x1c\xf1\x38\x14\x45\x5d\x44\x8f\xd0\x43\xb0\xb3\xab\x76\xf1\x4f\x47\xf0\xf1\xa8\x79\x59\xe9\xb1\xfa\x94\x15\x29\x18\x45\xbc\x11\xf2\x86\x30\xef\x99\xeb\x53\xdf\x5a\xef\xcb\x24\x97\x21\xe9\x0c\xb3\x12\x60\x41\xe1\x8a\xb9\x18\x56\x97\xe4\xb0\x2e\x61\xd4\x6d\x54\xaf\x39\x39\x93\xe5\xcb\xad\xe4\x07\xf2\xa6\x4c\xf7\x8e\x48\x6d\x6b\x10\xc4\xae\x77\xe8\xe1\x16\x00\x7e\xcf\x7c\x3f\xc0\xae\x91\x2e\x3b\x6e\x0e\x85\xf7\x96\x22\x27\xb8\x5f\x1b\x76\xd6\x46\x8b\x58\xbe\x4c\x53\x17\x24\x97\x01\xcb\x92\x61\xbc\x50\xf5\xd0\x70\xd5\x18\x24\xe6\x6b\x76\xf4\x0a\x78\xe6\xbb\xe1\x9c\x94\x34\x6d\xd2\x4e\xe8\xa0\x09\xc0\xe7\xf3\x2e\xa9\x21\x34\xf2\x94\x31\xe8\xf3\x79\x9d\x0c\x02\xbf\x57\x0d\x07\xc0\x93\x18\xd6\xc4\xec\xd8\xa8\xa8\x1a\x36\x6c\xde\x9d\xa8\x1a\x16\xcc\xe2\x09\x69\x14\x49\x65\x8f\xe6\xeb\xad\x0b\x93\xd4\xb7\x80\x17\xc5\x51\x94\x4b\x42\x3c\xfb\xc3\x6f\x61\x37\x43\x68\x58\x25\xcd\xae\x4e\xc1\x53\x15\x4b\x58\x56\x15\x9e\x9c\xd1\x52\xbb\xda\xcc\x92\xe3\x33\x92\x4a\x92\xd4\xeb\xe6\x65\xa2\x79\xf9\xc1\xd6\xd3\xdd\x64\xf3\xfa\x9c\x47\x67\x2e\x2c\x92\xfc\x1f\x6a\xa1\xe7\x29\x29\x35\x1b\x6f\x59\xe1\x17\xf8\x10\x92\xe3\x33\x1e\x1d\x81\x00\xc0\x3f\x17\xc3\x91\x80\x13\x84\x4f\xc7\x74\x38\x07\xc0\x27\x87\x15\x59\x09\x2f\x21\x1c\x51\x85\xf9\x8b\xbe\xe9\xa9\xbb\xdc\x06\x56\xa9\x93\x5c\x86\xee\xfe\x43\xac\xec\xb8\x3d\x8e\x1d\xab\x24\x6e\x4f\x2e\xfa\xee\xcd\xdc\x9f\x14\xbf\x27\xba\x88\x2f\xd1\x26\xd7\x4b\xeb\x4e\x73\x7a\x88\x35\xb4\x09\x16\x36\x34\x59\x47\xa1\xe1\xe9\x74\x72\x92\xa4\x07\xef\xec\x29\xec\x58\xa9\xde\x9e\xea\x58\x69\xf0\x14\xad\xea\xc8\x88\xf4\xc5\x33\x0f\xee\xbb\xc5\xc6\x23\xa9\x0b\xba\x5b\xfb\x3f\x6d\x7f\x68\xa4\x18\x8e\x3c\x1b\x58\x38\x6b\x68\x13\x3a\xd3\x02\xfc\x8f\x24\x23\x28\x2b\xb7\xd9\x35\x6c\xd6\x73\x51\xdb\xdb\x7f\x62\x2b\x0e\x94\x8a\x6c\x38\x59\xe3\x03\xe8\x55\xa5\xd0\x30\x70\x18\x47\xaa\x25\x7a\xf0\xce\x9e\x44\xf2\xe6\xa8\x75\x73\xc3\x2a\xbb\xac\x70\xd2\x13\x3f\x56\x30\xd2\x15\x89\x07\xef\x81\x9b\xbf\xf4\x2d\x02\xdb\x00\xfe\x2d\xe5\x47\x6d\x00\xfe\x15\xc9\x58\x0b\x00\xc1\x8a\x0b\xd6\xd4\x74\x3f\x61\x53\xc0\x23\x1b\x7c\xc5\x7f\x0b\x3d\x28\x2e\x3f\x47\x7c\x57\xf9\x5d\xf1\x90\x34\xe5\x0a\xbc\x04\x0b\x38\x82\x74\x05\x61\x51\xc0\x27\xd0\xbe\x8d\x70\xc4\xed\x0a\xbc\xfc\x37\x00\x00\xff\xff\xd6\x31\x3f\x11\xe9\x06\x00\x00"

func assetsResourcesConfigsConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesConfigsConfigToml,
		"assets/resources/configs/config.toml",
	)
}

func assetsResourcesConfigsConfigToml() (*asset, error) {
	bytes, err := assetsResourcesConfigsConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/configs/config.toml", size: 1769, mode: os.FileMode(420), modTime: time.Unix(1746692887, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsResourcesConfigsModelConf = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8e\x41\xca\x84\x30\x0c\x85\xf7\x3d\xc5\x5b\x89\x82\x78\x83\x9e\x44\x44\x6a\xff\x54\x2b\xd5\xf4\x8f\x11\x99\xdb\x0f\x75\x16\x83\x30\xab\x84\xc7\xf7\x25\xaf\x17\xfa\x3f\xe9\xd0\xf1\x8f\x42\xdc\xa3\x46\xde\x07\x23\xb0\x38\xce\xa9\x05\x4f\x6b\x0b\xe7\xd5\x98\x3e\x73\x8a\xfe\xf5\xc0\xf2\x0f\x4c\x38\xd1\x03\x9a\x61\x31\xb6\x18\xbf\x27\x28\x04\xf2\x3a\x18\x2a\x3a\x6f\x54\x5f\x0b\x09\xa1\xce\x1d\x05\x85\xb5\x70\x29\xf1\xd5\x34\xc6\xf4\x9b\x53\xbf\x90\x1c\x83\xd9\x60\x31\xd7\xd2\xdd\xff\x72\x19\x0d\xaa\x0a\xd2\xf1\xb4\x16\x27\xdf\xcb\x9d\x38\xaf\x9f\xa4\x34\x7a\x07\x00\x00\xff\xff\x69\x9d\x0d\x22\xe0\x00\x00\x00"

func assetsResourcesConfigsModelConfBytes() ([]byte, error) {
	return bindataRead(
		_assetsResourcesConfigsModelConf,
		"assets/resources/configs/model.conf",
	)
}

func assetsResourcesConfigsModelConf() (*asset, error) {
	bytes, err := assetsResourcesConfigsModelConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/resources/configs/model.conf", size: 224, mode: os.FileMode(420), modTime: time.Unix(1746673019, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/resources/configs/config.dev.toml": assetsResourcesConfigsConfigDevToml,
	"assets/resources/configs/config.toml":     assetsResourcesConfigsConfigToml,
	"assets/resources/configs/model.conf":      assetsResourcesConfigsModelConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"configs": &bintree{nil, map[string]*bintree{
				"config.dev.toml": &bintree{assetsResourcesConfigsConfigDevToml, map[string]*bintree{}},
				"config.toml":     &bintree{assetsResourcesConfigsConfigToml, map[string]*bintree{}},
				"model.conf":      &bintree{assetsResourcesConfigsModelConf, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
